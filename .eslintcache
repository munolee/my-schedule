[{"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\index.tsx":"1","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\index.tsx":"2","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\history.ts":"3","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\index.ts":"4","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\main\\calendar.tsx":"5","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\main\\timeTable.tsx":"6","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\components\\main\\calendar.tsx":"7","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\components\\main\\timeTable.tsx":"8","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\utils.ts":"9","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\components\\common\\header.tsx":"10"},{"size":180,"mtime":1615107625325,"results":"11","hashOfConfig":"12"},{"size":793,"mtime":1615204904518,"results":"13","hashOfConfig":"12"},{"size":91,"mtime":1615107625304,"results":"14","hashOfConfig":"12"},{"size":112,"mtime":1615107625305,"results":"15","hashOfConfig":"12"},{"size":332,"mtime":1615107625306,"results":"16","hashOfConfig":"12"},{"size":349,"mtime":1615107625307,"results":"17","hashOfConfig":"12"},{"size":35084,"mtime":1615107625302,"results":"18","hashOfConfig":"12"},{"size":16425,"mtime":1615107625303,"results":"19","hashOfConfig":"12"},{"size":10672,"mtime":1615117980118,"results":"20","hashOfConfig":"12"},{"size":2689,"mtime":1615107625271,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1iybulz",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\index.tsx",[],["48","49"],"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\index.tsx",["50","51","52","53"],"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\history.ts",[],"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\index.ts",[],"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\main\\calendar.tsx",[],"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\main\\timeTable.tsx",[],"C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\components\\main\\calendar.tsx",["54","55","56","57","58","59","60"],"import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport history from \"../../../app/containers/history\";\r\nimport * as Utils from \"../../../app/containers/utils\";\r\nimport Header from \"../common/header\";\r\nimport moment from \"moment\";\r\n\r\nexport interface CalendarProps {\r\n}\r\n\r\nexport interface CalendarState {\r\n    events: any[],\r\n    userList: any[],\r\n    eventType: any[],\r\n}\r\n\r\nexport class Calendar extends React.Component<CalendarProps, CalendarState> {\r\n    private currentDate = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\r\n    private array: any = {};\r\n    private weekData: any = {};\r\n\r\n    constructor(props?: any) {\r\n        super(props);\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n\r\n        let currentYear = this.currentDate.getFullYear();\r\n        let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n        currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n        if (!Utils.isEmpty(location.search)) {\r\n            if (!Utils.isEmpty(parsed.date) && Utils.isEmpty(parsed.week)) { // 캘린더 메인\r\n                let year = parsed.date.slice(0, 4);\r\n                let month = parsed.date.slice(4, 7);\r\n                this.currentDate = new Date(Number(year), Number(month) - 1, 1);\r\n            } else if (!Utils.isEmpty(parsed.date) && !Utils.isEmpty(parsed.week)) { // 캘린더 상세 (week)\r\n                let year = parsed.date.slice(0, 4);\r\n                let month = parsed.date.slice(4, 7);\r\n                this.currentDate = new Date(Number(year), Number(month) - 1, 1);\r\n                if (Number(Utils.lastWeek(this.currentDate)) < Number(parsed.week)) {\r\n                    history.push({\r\n                        pathname: '/calendar',\r\n                        search: `date=${String(parsed.date)}`,\r\n                    })\r\n                } else {\r\n                    this.handleDetailTable(Number(parsed.week));\r\n                    history.push({\r\n                        pathname: '/calendar',\r\n                        search: `date=${String(parsed.date)}&week=${Number(parsed.week)}`,\r\n                    })\r\n                    localStorage.setItem('currentWeek', parsed.week);\r\n                }\r\n\r\n            } else if (Utils.isEmpty(parsed.date) && Utils.isEmpty(parsed.week)) {\r\n                history.push({\r\n                    pathname: '/calendar',\r\n                    search: `date=${String(currentYear) + String(currentMonth)}`,\r\n                })\r\n            }\r\n        }\r\n        this.state = {\r\n            events: [],\r\n            userList: [\r\n                {\r\n                    userId: 0,\r\n                    userName: '사용자1',\r\n                    userIcon: '/image/user_icon.png',\r\n                },\r\n                {\r\n                    userId: 1,\r\n                    userName: '사용자2',\r\n                    userIcon: '/image/user_icon.png',\r\n                },\r\n                {\r\n                    userId: 2,\r\n                    userName: '사용자3',\r\n                    userIcon: '/image/user_icon.png',\r\n                }\r\n\r\n            ],\r\n            eventType: [\r\n                {\r\n                    id: 0,\r\n                    name: 'important',\r\n                },\r\n                {\r\n                    id: 1,\r\n                    name: 'annualLeave',\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'halfDayLeave'\r\n                }\r\n            ],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleGetEvents();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search)\r\n\r\n        let week = localStorage.getItem('currentWeek');\r\n        if (!Utils.isEmpty(week) || !Utils.isEmpty(parsed.week)) {\r\n            this.handleDetailTable(Number(week));\r\n        }\r\n\r\n        window.onpopstate = () => {\r\n            localStorage.setItem('currentPage', 'calendar');\r\n            let data = localStorage.getItem('currentState');\r\n            if (data != null) {\r\n                let jsonDate = JSON.parse(data);\r\n                let year = parsed.date.slice(0, 4);\r\n                let month = parsed.date.slice(4, 7);\r\n                this.currentDate = new Date(Number(year), Number(month) - 1, 1);\r\n                // this.handleGetEvents();\r\n                this.setState({\r\n                    ...jsonDate\r\n                })\r\n            }\r\n            if (!Utils.isEmpty(parsed.week)) {\r\n                this.handleDetailTable(Number(parsed.week));\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    // 일정 Get API 호출 부분\r\n    handleGetEvents = () => {\r\n        let eventList: any[] = [\r\n            {\r\n                startDate: \"2021-01-04\",\r\n                endDate: \"2021-01-05\",\r\n                eventTitle: '일정1',\r\n                userId: 0,\r\n                typeId: 0,\r\n            },\r\n            {\r\n                startDate: \"2021-02-05\",\r\n                endDate: \"2021-02-07\",\r\n                eventTitle: '일정2',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-10\",\r\n                endDate: \"2021-01-13\",\r\n                eventTitle: '일정3',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-03-11\",\r\n                endDate: \"2021-03-13\",\r\n                eventTitle: '일정4',\r\n                userId: 2,\r\n                typeId: 2,\r\n            },\r\n            {\r\n                startDate: \"2021-02-13\",\r\n                endDate: \"2021-02-16\",\r\n                eventTitle: '일정5',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-14\",\r\n                endDate: \"2021-01-15\",\r\n                eventTitle: '일정6',\r\n                userId: 2,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-21\",\r\n                endDate: \"2021-01-21\",\r\n                eventTitle: '일정17',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-24\",\r\n                endDate: \"2021-01-26\",\r\n                eventTitle: '일정18',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-25\",\r\n                endDate: \"2021-01-27\",\r\n                eventTitle: '일정19',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-08-16\",\r\n                endDate: \"2020-08-24\",\r\n                eventTitle: '일정1',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-05\",\r\n                endDate: \"2021-01-07\",\r\n                eventTitle: '일정2',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-03-10\",\r\n                endDate: \"2021-03-17\",\r\n                eventTitle: '일정3',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-04-11\",\r\n                endDate: \"2021-04-13\",\r\n                eventTitle: '일정4',\r\n                userId: 2,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-03-10\",\r\n                endDate: \"2021-03-16\",\r\n                eventTitle: '일정5',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-02-14\",\r\n                endDate: \"2021-02-15\",\r\n                eventTitle: '일정6',\r\n                userId: 2,\r\n                typeId: 2,\r\n            },\r\n            {\r\n                startDate: \"2020-12-21\",\r\n                endDate: \"2020-12-21\",\r\n                eventTitle: '일정17',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-11-21\",\r\n                eventTitle: '일정20',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-10-13\",\r\n                eventTitle: '일정21',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-10-10\",\r\n                eventTitle: '일정22',\r\n                userId: 0,\r\n                typeId: 2,\r\n            },\r\n            {\r\n                startDate: \"2020-07-20\",\r\n                endDate: \"2020-10-10\",\r\n                eventTitle: '일정23',\r\n                userId: 2,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-06-20\",\r\n                endDate: \"2020-10-10\",\r\n                eventTitle: '일정24',\r\n                userId: 2,\r\n                typeId: 0,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-10-29\",\r\n                eventTitle: '일정19',\r\n                userId: 0,\r\n                typeId: 0,\r\n            },\r\n            {\r\n                startDate: \"2020-12-24\",\r\n                endDate: \"2020-12-26\",\r\n                eventTitle: '일정18',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n        ]\r\n\r\n        eventList.sort(function (prev, next) {\r\n            if (prev.startDate < next.startDate) {\r\n                return -1;\r\n            } else if (prev.startDate === next.startDate && prev.endDate < next.endDate) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        this.setState({\r\n            events: eventList,\r\n        })\r\n\r\n    }\r\n\r\n    // 이전, 다음, 오늘 버튼 이벤트\r\n    handleCalendar = (type: string) => {\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n\r\n        if (Utils.isEmpty(parsed.week) && parsed.week === undefined) { // 메인 캘린더\r\n            if (type === \"pre\") {\r\n                this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, 1);\r\n            } else if (type === \"next\") {\r\n                this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 1);\r\n            } else if (type === \"today\") {\r\n                localStorage.removeItem('currentWeek');\r\n                this.currentDate = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\r\n            } else return;\r\n\r\n            localStorage.setItem('currentState', JSON.stringify(this.state));\r\n            let currentYear = this.currentDate.getFullYear();\r\n            let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n            currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n            history.push({\r\n                pathname: '/calendar',\r\n                search: `date=${String(currentYear)}${String(currentMonth)}`\r\n            })\r\n        } else if (!Utils.isEmpty(parsed.week)) {  // 캘린더 상세 페이지\r\n            if (type === \"pre\") {\r\n                if (localStorage.getItem(\"currentWeek\") === '0') {\r\n                    this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, 1);\r\n                    let currentYear = this.currentDate.getFullYear();\r\n                    let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n                    currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n                    history.push({\r\n                        pathname: '/calendar',\r\n                        search: `date=${String(currentYear)}${String(currentMonth)}&week=${String(Utils.weeks(this.currentDate.getFullYear(), this.currentDate.getMonth()) - 1)}`\r\n                    })\r\n                    localStorage.setItem('currentWeek', String(Number(Utils.weeks(this.currentDate.getFullYear(), this.currentDate.getMonth()) - 1)));\r\n                } else {\r\n                    let currentYear = this.currentDate.getFullYear();\r\n                    let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n                    currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n                    history.push({\r\n                        pathname: '/calendar',\r\n                        search: `date=${String(currentYear)}${String(currentMonth)}&week=${String(Number(parsed.week) - 1)}`\r\n                    })\r\n                    localStorage.setItem('currentWeek', String(Number(parsed.week) - 1));\r\n                }\r\n\r\n\r\n            } else if (type === \"next\") {\r\n                if (Number(localStorage.getItem(\"currentWeek\")) === (Number(Utils.weeks(this.currentDate.getFullYear(), this.currentDate.getMonth()) - 1))) {\r\n                    this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 1);\r\n                    let currentYear = this.currentDate.getFullYear();\r\n                    let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n                    currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n                    history.push({\r\n                        pathname: '/calendar',\r\n                        search: `date=${String(currentYear)}${String(currentMonth)}&week=${'0'}`\r\n                    })\r\n                    localStorage.setItem('currentWeek', '0');\r\n                } else {\r\n                    this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);\r\n                    let currentYear = this.currentDate.getFullYear();\r\n                    let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n                    currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n                    history.push({\r\n                        pathname: '/calendar',\r\n                        search: `date=${String(currentYear)}${String(currentMonth)}&week=${String(Number(parsed.week) + 1)}`\r\n                    })\r\n                    localStorage.setItem('currentWeek', String(Number(parsed.week) + 1));\r\n                }\r\n            } else if (type === \"today\") {\r\n                this.currentDate = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\r\n                let currentYear = this.currentDate.getFullYear();\r\n                let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n                currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n                history.push({\r\n                    pathname: '/calendar',\r\n                    search: `date=${String(currentYear)}${String(currentMonth)}`\r\n                })\r\n            } else return;\r\n        }\r\n        this.setState({})\r\n    }\r\n\r\n    // 일정 Hover 툴팁 띄우기\r\n    handleCalendarHover = (e: any, event: any, flag: boolean) => {\r\n        const {userList} = this.state;\r\n        let userName = '';\r\n        let userIcon = '';\r\n        const tooltip = document.querySelector<HTMLElement>(\".event-tooltip\")\r\n        if (flag && e.target && tooltip !== null) {\r\n            tooltip.className = 'event-tooltip active';\r\n            tooltip.style.left = `${e.pageX + 30}px`;\r\n            tooltip.style.top = `${e.pageY}px`;\r\n\r\n            for (let i = 0; i < userList.length; i++) {\r\n                if (Number(userList[i].userId) === event.userId) {\r\n                    userName = userList[i].userName;\r\n                    userIcon = userList[i].userIcon;\r\n                }\r\n            }\r\n            // tooltip.childNodes[0] = (<div> </div>); //user icon\r\n            tooltip.childNodes[1].textContent = `${userName}`\r\n            tooltip.childNodes[2].textContent = `${event.eventTitle}`\r\n            tooltip.childNodes[3].textContent = `${event.startDate} ~ ${event.endDate}`\r\n        } else if (!flag && tooltip !== null) {\r\n            tooltip.className = 'event-tooltip passive';\r\n        }\r\n    }\r\n\r\n    handleSetDetailTable = (week: any) => {\r\n        let year = new Date(this.currentDate).getFullYear();\r\n        let month = new Date(this.currentDate).getMonth();\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n        if (!Utils.isEmpty(location.search) && !Utils.isEmpty(parsed.date)) {\r\n            year = parsed.date.slice(0, 4);\r\n            month = parsed.date.slice(4, 6);\r\n        }\r\n        if (parsed.week) {\r\n            history.push({\r\n                pathname: \"/calendar\",\r\n                search: `date=${String(year)}${String(month)}`,\r\n                state: {\r\n                    state: this.state,\r\n                    date: new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1)\r\n                },\r\n            })\r\n        } else {\r\n            history.push({\r\n                pathname: \"/calendar\",\r\n                search: `date=${String(year)}${String(month)}&week=${week}`,\r\n                state: {\r\n                    state: this.state,\r\n                    date: new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1)\r\n                },\r\n            })\r\n        }\r\n\r\n        localStorage.setItem('currentWeek', week);\r\n        localStorage.setItem('currentState', JSON.stringify(this.state));\r\n        this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);\r\n    }\r\n\r\n    handleDetailTable = (week?: any) => {\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n        const selectWeek = document.querySelectorAll<HTMLElement>('.calendar tbody tr'); // 달력 week\r\n        this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);\r\n\r\n        this.handleCalendarHover('', '', false); // tooltip 초기화\r\n        if (!Utils.isEmpty(location.search) && !Utils.isEmpty(parsed.week)) {\r\n            if (week === 'back') {\r\n                // for (let i = 0; i <= selectWeek.length; i++) {\r\n                //     if (!Utils.isEmpty(selectWeek[i])) {\r\n                //         selectWeek[i].classList.remove('passive');\r\n                //         selectWeek[i].classList.remove('active');\r\n                //     }\r\n                // }\r\n                localStorage.removeItem('currentWeek');\r\n            } else {\r\n                for (let i = 0; i <= selectWeek.length; i++) {\r\n                    if (!Utils.isEmpty(selectWeek[i])) {\r\n                        if (week + 1 !== i && i !== 0) {\r\n                            selectWeek[i].className = 'passive';\r\n                        } else if (selectWeek[week + 1] !== undefined) {\r\n                            selectWeek[week + 1].className = 'active';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 내 일정 Route\r\n    handleGoToTimeTable = () => {\r\n        let currentYear = this.currentDate.getFullYear();\r\n        let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n        currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n        let currentDate: number | string = new Date().getDate();\r\n        currentDate = currentDate >= 10 ? currentDate : '0' + currentDate;\r\n        localStorage.setItem('currentPage', 'table');\r\n        history.push({\r\n            pathname: \"/table\",\r\n            search: `date=${String(currentYear)}${String(currentMonth)}${String(currentDate)}`,\r\n        })\r\n    }\r\n\r\n    // 달력 주 단위 그리기\r\n    renderCalendar = () => {\r\n        // 년도\r\n        let year = new Date(this.currentDate).getFullYear();\r\n        // 월  - 1월 : 0 부터 시작\r\n        let month = new Date(this.currentDate).getMonth();\r\n        // 달의 첫 1일 요일\r\n        let firstDay = new Date(year, month, 1).getDay();\r\n        // 달의 마지막 일\r\n        let lastDay = new Date(year, month + 1, 0).getDate();\r\n        // 마지막 주\r\n        let lastWeek = Math.ceil((firstDay + lastDay) / 7);\r\n\r\n        let curDate = new Date(year, month, 1);\r\n\r\n        this.currentDate.setDate(this.currentDate.getDate() - firstDay);\r\n\r\n        let html: any[] = [];\r\n\r\n        for (let i = 0; i < lastWeek; i++) {\r\n            html.push(\r\n                <tr key={Math.random()}>{this.renderCalendarDate(i, Utils.convertDateMonthToString(curDate))}</tr>\r\n            );\r\n        }\r\n        this.currentDate = new Date(year, month, 1);\r\n        return html;\r\n    }\r\n\r\n    // 달력 일 단위 그리기\r\n    renderCalendarDate = (week: number, curDate: string) => {\r\n        let html: any[] = [];\r\n        let year = new Date(this.currentDate).getFullYear();\r\n        let month = new Date(this.currentDate).getMonth();\r\n        let firstDay = new Date(year, month + 1, 1).getDay();\r\n        let lastDay = new Date(year, month + 1, 0).getDate();\r\n        let className = '';\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            className = '';\r\n            let date = Utils.convertDateToString(this.currentDate);\r\n            if (date === Utils.convertDateToString(new Date())) {\r\n                className = 'today';\r\n            } else if (Utils.convertDateMonthToString(this.currentDate) !== curDate) {\r\n                className = 'empty';\r\n            }\r\n\r\n            html.push(\r\n                <td key={Math.random()} className={className}\r\n                    onClick={() => this.handleSetDetailTable(week)}>\r\n                    <span className={'calendar-date'}>{this.currentDate.getDate()}</span>\r\n                    <div className='event-list'>{this.renderCalendarEvent(week)}</div>\r\n                </td>\r\n            )\r\n            this.currentDate.setDate(this.currentDate.getDate() + 1);\r\n        }\r\n        return html;\r\n    }\r\n\r\n    // 달력 일정(events) 그리기\r\n    renderCalendarEvent = (week: number) => {\r\n        const {events} = this.state;\r\n        let html: any[] = [];\r\n        let date = Utils.convertDateToString(this.currentDate);\r\n        let className = '';\r\n        let eventTitle = '';\r\n        let eventArray = this.array;\r\n        this.array = {};\r\n        let tempData: any = {};\r\n        let weekStartDate = date;\r\n        let weekEndDate = date;\r\n\r\n        if (this.currentDate.getDay() === 0) { // 일요일일때 초기화\r\n            this.weekData = {};\r\n            weekStartDate = date;\r\n            this.currentDate.setDate(this.currentDate.getDate() + 6);\r\n            weekEndDate = Utils.convertDateToString(this.currentDate);\r\n            this.currentDate.setDate(this.currentDate.getDate() - 6);\r\n        }\r\n\r\n        let cnt = 0;\r\n        for (let i = 0; i < events.length; i++) {\r\n            if (events[i].startDate === date) {\r\n                this.array[i] = i;\r\n            } else if (events[i].startDate <= date && events[i].endDate >= date) {\r\n                tempData[i] = i;\r\n            }\r\n            if ((events[i].startDate >= weekStartDate && events[i].startDate <= weekEndDate) ||\r\n                (events[i].endDate >= weekStartDate && events[i].endDate <= weekEndDate)) {\r\n                this.weekData[i] = events[i];\r\n            }\r\n            if (!Utils.isEmpty(this.weekData[i])) {\r\n                html.push(<span key={Math.random()} className={`empty ${cnt >= 4 ? \"hide\" : \"\"}`}> </span>)\r\n                cnt++;\r\n            }\r\n        }\r\n\r\n        events.map((event, idx) => {\r\n                eventTitle = event.eventTitle;\r\n                let position = this.array[idx];\r\n                if (event.startDate === date) { // 일정 시작\r\n                    // 일정이 하루일 때\r\n                    if (idx !== 0 && event.startDate === event.endDate) {\r\n                        className = 'start one-day'\r\n                    } else {\r\n                        className = 'start'\r\n                    }\r\n\r\n                    position = Object.keys(this.array).indexOf(String(idx));\r\n                    this.array[idx] = position;\r\n\r\n                    if (this.currentDate.getDay() === 0) {\r\n                        let i = 0;\r\n                        for (let key in this.array) {\r\n                            if (Number(key) === idx) {\r\n                                position = i;\r\n                                this.array[key] = i;\r\n                            }\r\n                            i++;\r\n                        }\r\n                    }\r\n                    html[position] =\r\n                        <span key={idx} className={`${className} event${idx % 5} ${position >= 4 ? \"hide\" : \"\"}`}\r\n                              onMouseEnter={(e) => this.handleCalendarHover(e, event, true)}\r\n                              onMouseLeave={(e) => this.handleCalendarHover(e, event, false)}>{eventTitle}</span>;\r\n                } else if (event.endDate === date) { // 일정 끝\r\n                    className = 'end'\r\n                    if (this.currentDate.getDay() === 0) {\r\n                        let i = 0;\r\n                        for (let key in tempData) {\r\n                            if (Number(key) === idx) {\r\n                                position = i;\r\n                                this.array[key] = i;\r\n                            }\r\n                            i++;\r\n                        }\r\n                    } else {\r\n                        position = eventArray[idx];\r\n                        this.array[idx] = position;\r\n                    }\r\n                    html[position] =\r\n                        <span key={idx}\r\n                              className={`${className} event${idx % 5} ${position >= 4 ? \"hide\" : \"\"}`}\r\n                              onMouseEnter={(e) => this.handleCalendarHover(e, event, true)}\r\n                              onMouseLeave={(e) => this.handleCalendarHover(e, event, false)}>{week === 0 && this.currentDate.getDay() === 0 ? eventTitle : \"\"\r\n                        }</span>;\r\n                } else if (event.startDate < date && event.endDate > date) { // 일정 진행중\r\n                    className = 'ing'\r\n                    if (this.currentDate.getDay() === 0) {\r\n                        let i = 0;\r\n                        for (let key in tempData) {\r\n                            if (Number(key) === idx) {\r\n                                position = i;\r\n                                this.array[key] = i;\r\n                            }\r\n                            i++;\r\n                        }\r\n                    } else {\r\n                        position = eventArray[idx];\r\n                        this.array[idx] = position;\r\n                    }\r\n                    html[position] =\r\n                        <span key={idx}\r\n                              className={`${className} event${idx % 5}  ${position >= 4 ? \"hide\" : \"\"}`}\r\n                              onMouseEnter={(e) => this.handleCalendarHover(e, event, true)}\r\n                              onMouseLeave={(e) => this.handleCalendarHover(e, event, false)}>{week === 0 && this.currentDate.getDay() === 0 ? eventTitle : \"\"}</span>;\r\n                }\r\n                if (position !== undefined && position === 4) {\r\n                    html[position] = <span key={Math.random()} className={'more'}>. . .</span>;\r\n                }\r\n                return event;\r\n            }\r\n        )\r\n\r\n        return html;\r\n    }\r\n\r\n    // 일정 목록 그리기\r\n    renderEventList = (type: string) => {\r\n        const {events, userList, eventType} = this.state;\r\n        let html: any[] = [];\r\n        let userName = '';\r\n        let eventName = '';\r\n        let count = 0;\r\n\r\n        events.map((event, idx) => {\r\n            for (let i = 0; i < userList.length; i++) {\r\n                if (Number(userList[i].userId) === event.userId) {\r\n                    userName = userList[i].userName;\r\n                }\r\n            }\r\n            for (let i = 0; i < eventType.length; i++) {\r\n                if (Number(eventType[i].id) === event.typeId) {\r\n                    eventName = eventType[i].name;\r\n                }\r\n            }\r\n            if (type === eventName) {\r\n                let currentStartDate = Utils.convertDateToString(this.currentDate);\r\n                let currentEndDate = Utils.convertDateToString(new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0));\r\n                if ((event.startDate >= currentStartDate && event.startDate <= currentEndDate)\r\n                    || (event.endDate >= currentStartDate && event.endDate <= currentEndDate)\r\n                    || (event.startDate < currentStartDate && event.endDate > currentEndDate)\r\n                ) {\r\n                    html.push(\r\n                        <li key={Math.random()} className={`event${idx % 5}`}>\r\n                            <span className=\"event-list-circle\"> </span>\r\n                            <span>{`${type === 'important' ? event.eventTitle + ' (' + userName + ')' : userName}`}</span>\r\n                        </li>\r\n                    )\r\n                    count++;\r\n                }\r\n            }\r\n\r\n        })\r\n        if (count === 0) {\r\n            html.push(\r\n                <li key={Math.random()}><span className=\"event-list-empty\"> - </span></li>\r\n            )\r\n        }\r\n        return html;\r\n    }\r\n\r\n\r\n    render() {\r\n        let tempDate = Utils.convertDateMonthToString(new Date());\r\n        let preFlag = tempDate !== Utils.convertDateMonthToString(this.currentDate);\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n        let year = this.currentDate.getFullYear();\r\n        let month = this.currentDate.getMonth() + 1;\r\n        if (location.search) {\r\n            year = parsed.date.slice(0, 4);\r\n            month = parsed.date.slice(4, 6);\r\n        }\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Header/>\r\n                <div className=\"event-wrap\">\r\n                    <div className=\"event-list\">\r\n                        <div className=\"event-important\"><span className=\"event-list-title\">주요 일정</span>\r\n                            <ul>{this.renderEventList('important')}</ul>\r\n                        </div>\r\n                        <div className=\"event-annual\"><span className=\"event-list-title\">연차</span>\r\n                            <ul>{this.renderEventList('annualLeave')}</ul>\r\n                        </div>\r\n                        <div className=\"event-annual-half\"><span className=\"event-list-title\">반차</span>\r\n                            <ul>{this.renderEventList('halfDayLeave')}</ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"date-wrap main\">\r\n                    <div className=\"select-date\">\r\n                        <div className=\"date-label\">\r\n                            {\r\n                                Utils.isEmpty(parsed.week) &&\r\n                                <>\r\n                                        <span className=\"date-main\">\r\n                                    <h2>\r\n                                        {parsed.date === null ? \"\" :\r\n                                            `${Number(month)}월`\r\n                                        }\r\n                                    </h2>\r\n                                    </span>\r\n                                    <span className={\"date-sub year\"}>\r\n                                        <h4>\r\n                                    {parsed.date === null ? \"\" :\r\n                                        `${year}년`\r\n                                    }\r\n                                        </h4>\r\n                                        </span>\r\n                                </>\r\n                            }\r\n\r\n                            {!Utils.isEmpty((parsed.week)) &&\r\n                            <>\r\n                                        <span className=\"date-main\">\r\n                                    <h2>\r\n                                        {parsed.date === null ? \"\" :\r\n                                            `${Number(month)}월`\r\n                                        }\r\n                                    </h2>\r\n                                    </span>\r\n                                <span className={\"date-sub\"}>\r\n                                        <h4>\r\n                                    {parsed.date === null ? \"\" :\r\n                                        `${year}년`\r\n                                    }\r\n                                        </h4>\r\n                                        <h4>\r\n                                        {parsed.week === null ? \"\" : Number(parsed.week) + 1}주차\r\n                                        </h4>\r\n                                        </span>\r\n\r\n                            </>\r\n                            }\r\n                        </div>\r\n                        <span className={\"pre \" + (preFlag ? \"\" : \"op\")}\r\n                              onClick={() => this.handleCalendar(preFlag ? \"pre\" : \"pre\")}>&lt;</span>\r\n                        <span className={\"current-month\"} onClick={() => this.handleCalendar(\"today\")}>오늘</span>\r\n                        <span className={\"next \"} onClick={() => this.handleCalendar(\"next\")}>&gt;</span>\r\n                        <div className={\"create-event-btn\"} onClick={this.handleGoToTimeTable}>내 일정</div>\r\n                    </div>\r\n                    <table className=\"calendar main\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <th>일</th>\r\n                            <th>월</th>\r\n                            <th>화</th>\r\n                            <th>수</th>\r\n                            <th>목</th>\r\n                            <th>금</th>\r\n                            <th>토</th>\r\n                        </tr>\r\n                        {this.renderCalendar()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className={\"event-tooltip\"}>\r\n                    <img src={'/image/user_icon.png'}/>\r\n                    <span className={\"event-user\"}>이름</span>\r\n                    <span className={\"event-title\"}> 내용</span>\r\n                    <span className={\"event-date\"}>기간~기간</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Calendar;\r\n","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\components\\main\\timeTable.tsx",["61","62","63","64"],"import React from \"react\";\r\nimport history from \"../../../app/containers/history\";\r\nimport * as Utils from \"../../../app/containers/utils\";\r\nimport Header from \"../common/header\";\r\n\r\n\r\nexport interface TimeTableProps {\r\n}\r\n\r\nexport interface TimeTableState {\r\n    weekDate: any[],\r\n    events: any[],\r\n    firstDate: string,\r\n    lastDate: string,\r\n}\r\n\r\nexport class TimeTable extends React.Component<TimeTableProps, TimeTableState> {\r\n    private currentDate = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()); // 로컬 스토리지\r\n\r\n    constructor(props?: any) {\r\n        super(props);\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n\r\n        if (!Utils.isEmpty(location.search) && !Utils.isEmpty(parsed.date)) {\r\n            let year = parsed.date.slice(0, 4);\r\n            let month = parsed.date.slice(4, 6);\r\n            let date = parsed.date.slice(6, 8);\r\n            this.currentDate = new Date(year, month - 1, date);\r\n        }\r\n\r\n        this.state = {\r\n            weekDate: [],\r\n            events: [\r\n                {\r\n                    startDate: \"2020-12-14\",\r\n                    endDate: \"2020-12-18\",\r\n                    eventTitle: '일정1',\r\n                },\r\n                {\r\n                    startDate: \"2020-12-05\",\r\n                    endDate: \"2020-12-06\",\r\n                    eventTitle: '휴가1',\r\n                },\r\n            ],\r\n            firstDate: '',\r\n            lastDate: '',\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleGetEvents();\r\n        this.handleSetTime();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const location: any = history.location;\r\n        const queryString = require(\"query-string\");\r\n        const parsed = queryString.parse(location.search);\r\n\r\n        window.onpopstate = () => {\r\n            localStorage.setItem('currentPage', 'table');\r\n            this.handleClickCell('init');\r\n            if (!Utils.isEmpty(location.search) && !Utils.isEmpty(parsed.date)) {\r\n                let year = parsed.date.slice(0, 4);\r\n                let month = parsed.date.slice(4, 6);\r\n                let date = parsed.date.slice(6, 8);\r\n                this.currentDate = new Date(year, month - 1, date);\r\n            }\r\n            this.handleSetTime();\r\n        }\r\n    }\r\n\r\n\r\n    // 일정 Get API 호출 부분\r\n    handleGetEvents = () => {\r\n        let eventList: any[] = [\r\n            {\r\n                startDate: \"2021-01-04\",\r\n                endDate: \"2021-01-05\",\r\n                eventTitle: '일정1',\r\n                userId: 0,\r\n                typeId: 0,\r\n            },\r\n            {\r\n                startDate: \"2021-02-05\",\r\n                endDate: \"2021-02-07\",\r\n                eventTitle: '일정2',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-10\",\r\n                endDate: \"2021-01-13\",\r\n                eventTitle: '일정3',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-03-11\",\r\n                endDate: \"2021-03-13\",\r\n                eventTitle: '일정4',\r\n                userId: 2,\r\n                typeId: 2,\r\n            },\r\n            {\r\n                startDate: \"2021-02-13\",\r\n                endDate: \"2021-02-16\",\r\n                eventTitle: '일정5',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-14\",\r\n                endDate: \"2021-01-15\",\r\n                eventTitle: '일정6',\r\n                userId: 2,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-21\",\r\n                endDate: \"2021-01-21\",\r\n                eventTitle: '일정17',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-24\",\r\n                endDate: \"2021-01-26\",\r\n                eventTitle: '일정18',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-25\",\r\n                endDate: \"2021-01-27\",\r\n                eventTitle: '일정19',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-08-16\",\r\n                endDate: \"2020-08-24\",\r\n                eventTitle: '일정1',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-01-05\",\r\n                endDate: \"2021-01-07\",\r\n                eventTitle: '일정2',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-03-10\",\r\n                endDate: \"2021-03-17\",\r\n                eventTitle: '일정3',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-04-11\",\r\n                endDate: \"2021-04-13\",\r\n                eventTitle: '일정4',\r\n                userId: 2,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-03-10\",\r\n                endDate: \"2021-03-16\",\r\n                eventTitle: '일정5',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2021-02-14\",\r\n                endDate: \"2021-02-15\",\r\n                eventTitle: '일정6',\r\n                userId: 2,\r\n                typeId: 2,\r\n            },\r\n            {\r\n                startDate: \"2020-12-21\",\r\n                endDate: \"2020-12-21\",\r\n                eventTitle: '일정17',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-11-21\",\r\n                eventTitle: '일정20',\r\n                userId: 0,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-10-13\",\r\n                eventTitle: '일정21',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-10-10\",\r\n                eventTitle: '일정22',\r\n                userId: 0,\r\n                typeId: 2,\r\n            },\r\n            {\r\n                startDate: \"2020-07-20\",\r\n                endDate: \"2020-10-10\",\r\n                eventTitle: '일정23',\r\n                userId: 2,\r\n                typeId: 1,\r\n            },\r\n            {\r\n                startDate: \"2020-06-20\",\r\n                endDate: \"2020-10-10\",\r\n                eventTitle: '일정24',\r\n                userId: 2,\r\n                typeId: 0,\r\n            },\r\n            {\r\n                startDate: \"2020-09-20\",\r\n                endDate: \"2020-10-29\",\r\n                eventTitle: '일정19',\r\n                userId: 0,\r\n                typeId: 0,\r\n            },\r\n            {\r\n                startDate: \"2020-12-24\",\r\n                endDate: \"2020-12-26\",\r\n                eventTitle: '일정18',\r\n                userId: 1,\r\n                typeId: 1,\r\n            },\r\n        ]\r\n\r\n        eventList.sort(function (prev, next) {\r\n            if (prev.startDate < next.startDate) {\r\n                return -1;\r\n            } else if (prev.startDate === next.startDate && prev.endDate < next.endDate) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        this.setState({\r\n            events: eventList,\r\n        })\r\n\r\n    }\r\n\r\n    handleSetTime = () => {\r\n        let currentDay = this.currentDate;\r\n        let theYear = currentDay.getFullYear();\r\n        let theMonth = currentDay.getMonth();\r\n        let theDate = currentDay.getDate();\r\n        let theDayOfWeek = currentDay.getDay();\r\n        let thisWeek = [];\r\n        let firstDate = '';\r\n        let lastDate = '';\r\n        const dayArr = ['일', '월', '화', '수', '목', '금', '토'];\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            let resultDay = new Date(theYear, theMonth, theDate + (i - theDayOfWeek));\r\n            if (i === 0) firstDate = resultDay.getMonth() + 1 + '.' + resultDay.getDate();\r\n            else if (i === 6) lastDate = resultDay.getMonth() + 1 + '.' + resultDay.getDate();\r\n            localStorage.setItem('yearMatch', (new Date).getFullYear() === this.currentDate.getFullYear() ? \"true\" : \"false\");\r\n            thisWeek[i] = resultDay.getMonth() + 1 + '월 ' + resultDay.getDate() + '일 (' + dayArr[resultDay.getDay()] + ')';\r\n        }\r\n        this.setState({\r\n            weekDate: thisWeek,\r\n            firstDate: firstDate,\r\n            lastDate: lastDate,\r\n        })\r\n        // localStorage.setItem('currentState', JSON.stringify(this.state));\r\n    }\r\n\r\n    handleClickCell = (cell: any) => {\r\n        const selectCell = document.querySelectorAll<HTMLElement>('.time-table tr');\r\n        const todayCell = document.querySelectorAll<HTMLElement>('.time-table tr.today');\r\n\r\n        if (selectCell !== null && !Utils.isEmpty(cell)) {\r\n            for (let i = 0; i < selectCell.length; i++) {\r\n                if (cell + 1 === i) {\r\n                    selectCell[i].className += \" active\";\r\n                } else {\r\n                    selectCell[i].classList.remove(\"active\");\r\n                    if (i !== 0 && i < selectCell.length) {\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (cell === 'today' && !Utils.isEmpty(cell)) {\r\n            todayCell[0].className += \" active\";\r\n        }\r\n    }\r\n\r\n    // 이전, 다음, 오늘 버튼 이벤트\r\n    handleTimeTable = (type: string) => {\r\n        if (type === \"pre\") {\r\n            this.handleClickCell('init');\r\n            this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), this.currentDate.getDate() - 7);\r\n        } else if (type === \"next\") {\r\n            this.handleClickCell('init');\r\n            this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), this.currentDate.getDate() + 7);\r\n        } else if (type === \"today\") {\r\n            let curDate = Utils.convertDateToString(this.currentDate);\r\n            let todayDate = Utils.convertDateToString(new Date());\r\n            if (curDate !== todayDate) {\r\n                this.handleClickCell('init');\r\n                this.currentDate = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());\r\n            } else if (curDate === todayDate) {\r\n                this.handleClickCell('today');\r\n            }\r\n        } else return;\r\n\r\n        let currentYear = this.currentDate.getFullYear();\r\n        let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n        currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n        let currentDate: number | string = this.currentDate.getDate();\r\n        currentDate = currentDate >= 10 ? currentDate : '0' + currentDate;\r\n        history.push({\r\n            pathname: '/table',\r\n            search: `date=${currentYear}${currentMonth}${currentDate}`\r\n        })\r\n        this.setState({})\r\n        this.handleSetTime();\r\n    }\r\n\r\n    handleRequestStatus = () => {\r\n        //todo 요청현황 Modal\r\n    }\r\n\r\n    renderTimeTable = () => {\r\n        const {weekDate} = this.state;\r\n        let html: any[] = [];\r\n        let yearMatch = localStorage.getItem('yearMatch');\r\n        let today = `${(new Date).getMonth() + 1}월 ${(new Date).getDate()}일`;\r\n        weekDate.map((date, idx) => {\r\n                html.push(\r\n                    <tr className={yearMatch === \"true\" && date.split(' (')[0] === today ? `date${idx} today active` : `date${idx}`}\r\n                        key={idx} onClick={() => this.handleClickCell(idx)}>\r\n                        <td><span className=\"work-time-date\">{date}</span>\r\n                            {yearMatch === \"true\" && date.split(' (')[0] === today &&\r\n                            <span className=\"today\">오늘</span>}</td>\r\n                        <td>{this.renderTimeTableEvents(idx)}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n        )\r\n        return html;\r\n    }\r\n\r\n    renderTimeTableEvents = (idx: number) => {\r\n        // dayType - working(근무), weekend(주말), annualLeave(연차), halfDayLeave(반차)\r\n        let html: any[] = [];\r\n        let className = ''\r\n        className = idx !== 0 && idx !== 6 ? 'working' : 'weekend';\r\n\r\n        html.push(\r\n            <div className=\"work-time-list\" key={Math.random()}>\r\n                <span className={`work-time-title ${className}`}>{className === \"working\" ? \"근무\" : \"주말\"}</span>\r\n                {className === \"working\" && <span className=\"work-time\">오전 10:00 ~ 오후 06:00</span>}\r\n                <div className=\"work-time-progress\">{this.renderEventsProgress()}</div>\r\n            </div>\r\n        )\r\n\r\n        return html;\r\n    }\r\n\r\n    renderEventsProgress = () => {\r\n        let html: any[] = [];\r\n        let progressStyle = {\r\n            width: '40%',\r\n        }\r\n\r\n        html.push(\r\n            <div className=\"work-time-progress-box\" key={Math.random()}>\r\n                <span className=\"progress-grid\">6</span>\r\n                <span className=\"progress-grid\">8</span>\r\n                <span className=\"progress-grid\">10</span>\r\n                <span className=\"progress-grid\">12</span>\r\n                <span className=\"progress-grid\">14</span>\r\n                <span className=\"progress-grid\">16</span>\r\n                <span className=\"progress-grid\">18</span>\r\n                <span className=\"progress-grid\">20</span>\r\n                <span className=\"progress-grid\">22</span>\r\n                <span className=\"progress-grid last\">00</span>\r\n                <span className=\"progress\" style={progressStyle}></span>\r\n            </div>\r\n        )\r\n\r\n        return html;\r\n    }\r\n\r\n    render() {\r\n        let tempDate = Utils.convertDateMonthToString(new Date());\r\n        let preFlag = tempDate !== Utils.convertDateMonthToString(this.currentDate);\r\n        const {weekDate, firstDate, lastDate} = this.state;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Header/>\r\n                <div className=\"date-wrap time-table-wrap\">\r\n                    <div className=\"select-date\">\r\n                        <div className=\"date-label\">\r\n                            <span className=\"date-main\">\r\n                            <h2>\r\n                                {this.currentDate === null ? \"\" : `${this.currentDate.getMonth() + 1}월`}\r\n                            </h2>\r\n                            </span>\r\n                            <span className=\"date-sub\">\r\n                                 <h4>\r\n                                {this.currentDate === null ? \"\" : `${this.currentDate.getFullYear()}년`}\r\n                            </h4>\r\n                            <h4>\r\n                                {weekDate === null ? \"\" : `${firstDate}  ~ ${lastDate}`}\r\n                            </h4>\r\n                            </span>\r\n\r\n                        </div>\r\n\r\n                        {/*<span className={\"back\"} onClick={() => Utils.handleHistoryBack()}>돌아가기</span>*/}\r\n                        <span className={\"pre \" + (preFlag ? \"\" : \"op\")}\r\n                              onClick={() => this.handleTimeTable(preFlag ? \"pre\" : \"pre\")}>&lt;</span>\r\n                        <span className=\"current-month\" onClick={() => this.handleTimeTable(\"today\")}>오늘</span>\r\n\r\n                        <span className={\"next \"} onClick={() => this.handleTimeTable(\"next\")}>&gt;</span>\r\n                        <div className=\"create-event-btn\" onClick={() => this.handleRequestStatus()}>요청 현황</div>\r\n                    </div>\r\n                    <table className=\"time-table\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <th>근무 일자</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        {this.renderTimeTable()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeTable;","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\containers\\utils.ts",["65","66"],"import moment from \"moment\";\r\nimport history from \"../../app/containers/history\";\r\n\r\n\r\n/**\r\n * OS Check\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function osCheck() {\r\n    let os = 'android';\r\n    try {\r\n\r\n        let ua = navigator.userAgent;\r\n\r\n        let checker = {\r\n            iphone: ua.match(/(iPhone|iPod|iPad)/),\r\n            android: ua.match(/Android/)\r\n        };\r\n\r\n        if (!ua.includes(\"connectionType/webview\")) {\r\n            os = 'web';\r\n        } else if (checker.android) {\r\n            os = 'android';\r\n        } else if (checker.iphone) {\r\n            os = 'ios';\r\n        }\r\n    } catch (e) {\r\n        os = 'error';\r\n    }\r\n    return os;\r\n}\r\n\r\n/**\r\n * Apple Login Enable Check\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function appleLoginEnable() {\r\n    let flag = false;\r\n    try {\r\n        let ua = navigator.userAgent;\r\n\r\n        let regexResult = null;\r\n        if (ua.match(/iPhone/)) {\r\n            let regex = /(iPhone) OS (\\d+)_(\\d+)(?:_(\\d+))?/g;\r\n            regexResult = regex.exec(ua);\r\n\r\n        } else if (ua.match(/iPad/)) {\r\n            let regex = /(iPad).+ OS (\\d+)_(\\d+)(?:_(\\d+))?/g;\r\n            regexResult = regex.exec(ua);\r\n        }\r\n\r\n        if (regexResult != null) {\r\n            flag = Number(regexResult[2]) >= 13;\r\n        }\r\n    } catch (e) {\r\n        flag = false;\r\n    }\r\n    return flag;\r\n}\r\n\r\n/**\r\n * Android Device Check\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function androidDevice() {\r\n    const messageHandler = (window as any).AndroidApp;\r\n    return messageHandler;\r\n}\r\n\r\n/**\r\n * IOS Device Check\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param functionName : Function Name\r\n */\r\nexport function iosDevice(functionName: string) {\r\n    const messageHandler =\r\n        (window as any).webkit &&\r\n        (window as any).webkit.messageHandlers &&\r\n        (window as any).webkit.messageHandlers[functionName];\r\n    return messageHandler;\r\n}\r\n\r\n/**\r\n * SmallLetter & Number Pattern Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function englishNumberCheck(value: string) {\r\n    let regExp = /^[a-z0-9+]*$/;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Name Pattern Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function nameCheck(value: string) {\r\n    let regExp = /([^가-힣\\x20^a-z^A-Z])/i;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Not Hangul Pattern Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function notHangulCheck(value: string) {\r\n    let regExp = /[a-z0-9]|[ \\[\\]{}()<>?|`~!@#$%^&*-_+=,.;:\\\"\\\\]/g;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Hangul Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function hangulCheck(value: string) {\r\n    let regExp = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Password Pattern(영문으로 시작하며, 영문소문자와 숫자로 이루어져 있고, 6~20자리) Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function passwordCheck(value: string) {\r\n    let regExp = /^[a-z]+[a-z0-9]{5,20}$/;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Phone Number Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function phoneCheck(value: string) {\r\n    let regExp = /^01([0|1|6|7|8|9])-?([0-9]{4})-?([0-9]{4})$/;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Number Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function isNumber(value: string) {\r\n    let flag = false;\r\n    let regExp = /^[0-9,]*$/;\r\n    flag = regExp.test(value);\r\n    if (regExp.test(value)) {\r\n        flag = !value.includes(\",\")\r\n    }\r\n\r\n    return flag;\r\n}\r\n\r\n/**\r\n * Number Regex\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function isAmount(value: string) {\r\n    let regExp = /^[0-9,]*$/;\r\n    return regExp.test(value);\r\n}\r\n\r\n/**\r\n * Empty Check\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param value : Object Value\r\n */\r\nexport function isEmpty(value: any) {\r\n    return typeof value === \"undefined\" || value === null || value === \"\";\r\n}\r\n\r\n/**\r\n * Date Converting\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param momentDate : Date Value\r\n */\r\nexport function convertDateToString(momentDate: any) {\r\n    return moment(momentDate).format('YYYY-MM-DD');\r\n}\r\n\r\n/**\r\n * Date Converting\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param momentDate : Object Value\r\n */\r\nexport function convertDateMonthToString(momentDate: any) {\r\n    return moment(momentDate).format('YYYY-MM');\r\n}\r\n\r\n/**\r\n * DateTime Converting\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param momentDate : Date Value\r\n */\r\nexport function convertDateTimeToString(momentDate: any) {\r\n    return moment(momentDate).format('YYYY-MM-DD HH:mm');\r\n}\r\n\r\n/**\r\n * 콤마찍기\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param number : Object Value\r\n */\r\nexport function numberWithCommas(number: number) {\r\n    try {\r\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    } catch (e) {\r\n        return \"0\";\r\n    }\r\n}\r\n\r\n/**\r\n * 생년월일 형식으로 바꾸기\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param birthdate : 생년월일\r\n */\r\nexport function birthDateFormat(birthdate: string) {\r\n    try {\r\n        return birthdate.replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1-$2-$3');\r\n    } catch (e) {\r\n        return birthdate;\r\n    }\r\n}\r\n\r\n/**\r\n * 핸드폰 번호 형식으로 바꾸기\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param phone : PhoneNumber\r\n */\r\nexport function phoneFormat(phone: string) {\r\n    return phone.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\r\n}\r\n\r\nexport function splitSpaceOrNewLine(text: string) {\r\n    return String(text).split(/[\\0\\s]+/g).filter(Boolean);\r\n}\r\n\r\n/**\r\n * Default Popup Control\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param i    : this\r\n * @param data : Object Data\r\n */\r\nexport function handlePopup(i: any, data: any) {\r\n    i.setState({\r\n        popup: {\r\n            ...data\r\n        }\r\n    });\r\n    if (data.classActive !== 'active') {\r\n        if (data.type === 'login') { //# 로그인 페이지 이동\r\n            history.push('/login');\r\n        }\r\n        if (data.type === 'logout') { //# 로그아웃\r\n            i.logoutApi();\r\n        }\r\n        if (data.type === 'historyBack') {\r\n            handleHistoryBack();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Data Set State\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param i : this\r\n * @param e : Object Data\r\n */\r\nexport function handleData(i: any, e: any) {\r\n    if (isEmpty(e.target)) {\r\n        return;\r\n    }\r\n    if (e.target.name == null) {\r\n        return;\r\n    }\r\n    let value = e.target.value;\r\n    i.setState({\r\n        [e.target.name]: value,\r\n        ...e\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Data Set State\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n *\r\n * @param i    : this\r\n * @param data : Object Data\r\n */\r\nexport function handleDeleteData(i: any, data: any) {\r\n    i.setState({\r\n        ...i.state,\r\n        ...data\r\n    });\r\n}\r\n\r\n/**\r\n * 뒤로가기\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function handleHistoryBack() {\r\n    console.log(history)\r\n    if (history.length === 1) {\r\n        history.push('/main');\r\n    } else {\r\n        history.goBack()\r\n    }\r\n}\r\n\r\n/**\r\n * Calendar How Many Weeks\r\n * Weeks start on Another\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function weeks(year: number, month: number) {\r\n    let firstDay = new Date(year, month, 1).getDay(); //## 1일의 요일\r\n    let lastDay = new Date(year, month + 1, 0).getDate(); //## 마지막 날짜\r\n\r\n    return Math.ceil((firstDay + lastDay) / 7);\r\n}\r\n\r\n/**\r\n * Calendar Weeks length\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function lastWeek(date: any) {\r\n    let lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n    return Math.ceil(lastDate.getDate() / 7);\r\n}\r\n\r\n/**\r\n * Adjust Action Check\r\n * ---------------------------------------------------------------------------------------------------------------------\r\n */\r\nexport function adjustType(value: string) {\r\n    if (osCheck() === 'android') {\r\n        const androidHandler = androidDevice();\r\n        androidHandler.adjustType(value);\r\n    } else if (osCheck() === 'ios') {\r\n        let iosData = {\r\n            value: value\r\n        };\r\n        const iosHandler = iosDevice('adjustType');\r\n        iosHandler.postMessage(iosData);\r\n    }\r\n}\r\n","C:\\Users\\User\\react-my-test-app\\AttendanceManagement\\src\\app\\components\\common\\header.tsx",["67","68"],"import React from \"react\";\r\nimport history from \"../../../app/containers/history\";\r\n\r\nexport interface HeaderProps {\r\n}\r\n\r\nexport interface HeaderState {\r\n}\r\n\r\nexport class Header extends React.Component<HeaderProps, HeaderState> {\r\n    private currentDate = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());\r\n\r\n    constructor(props?: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        window.onpopstate = () => {\r\n            // 다시 렌더되게끔 해야함\r\n            this.setState({})\r\n        }\r\n    }\r\n\r\n\r\n    handleRouteLocation = (location: string) => {\r\n        let curPage = localStorage.getItem('currentPage');\r\n        let currentYear = this.currentDate.getFullYear();\r\n        let currentMonth: number | string = this.currentDate.getMonth() + 1;\r\n        currentMonth = currentMonth >= 10 ? currentMonth : '0' + currentMonth;\r\n        let currentDate: number | string = new Date().getDate();\r\n        currentDate = currentDate >= 10 ? currentDate : '0' + currentDate;\r\n\r\n        if (location === 'calendar' && curPage !== 'calendar') {\r\n            history.push({\r\n                pathname: \"/calendar\",\r\n                search: `date=${String(currentYear)}${String(currentMonth)}`,\r\n                state: {\r\n                    state: this.state,\r\n                    date: new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1)\r\n                }\r\n            })\r\n        } else if (location === 'table' && curPage !== 'table') {\r\n            history.push({\r\n                pathname: '/table',\r\n                search: `date=${String(currentYear)}${String(currentMonth)}${String(currentDate)}`\r\n            })\r\n        }\r\n        localStorage.setItem('currentPage', location);\r\n    }\r\n\r\n    render() {\r\n        let curPage = localStorage.getItem('currentPage');\r\n        if (!curPage) curPage = 'calendar';\r\n\r\n        return (\r\n            <div className=\"header\">\r\n                <ul className=\"header-list\">\r\n                    <li className={`list-menu ${curPage === 'calendar' ? 'active' : ''}`}\r\n                        onClick={() => this.handleRouteLocation('calendar')}>\r\n                        <img src={'/image/home.png'}/><span>전체 일정</span>\r\n                    </li>\r\n                    <li className={`list-menu ${curPage === 'table' ? 'active' : ''}`}\r\n                        onClick={() => this.handleRouteLocation('table')}>\r\n                        <img src={'/image/time.png'}/><span>근무&middot;일정</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Header;\r\n",["69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":4,"column":3,"nodeType":"77","messageId":"78","endLine":4,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":6,"column":3,"nodeType":"77","messageId":"78","endLine":6,"endColumn":9},{"ruleId":"75","severity":1,"message":"80","line":7,"column":3,"nodeType":"77","messageId":"78","endLine":7,"endColumn":11},{"ruleId":"75","severity":1,"message":"81","line":11,"column":8,"nodeType":"77","messageId":"78","endLine":11,"endColumn":15},{"ruleId":"75","severity":1,"message":"82","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":13},{"ruleId":"75","severity":1,"message":"83","line":6,"column":8,"nodeType":"77","messageId":"78","endLine":6,"endColumn":14},{"ruleId":"75","severity":1,"message":"84","line":412,"column":21,"nodeType":"77","messageId":"78","endLine":412,"endColumn":29},{"ruleId":"75","severity":1,"message":"85","line":537,"column":13,"nodeType":"77","messageId":"78","endLine":537,"endColumn":21},{"ruleId":"75","severity":1,"message":"86","line":538,"column":13,"nodeType":"77","messageId":"78","endLine":538,"endColumn":20},{"ruleId":"87","severity":1,"message":"88","line":688,"column":33,"nodeType":"89","messageId":"90","endLine":688,"endColumn":35},{"ruleId":"91","severity":1,"message":"92","line":823,"column":21,"nodeType":"93","endLine":823,"endColumn":56},{"ruleId":"94","severity":1,"message":"95","line":273,"column":48,"nodeType":"96","messageId":"97","endLine":273,"endColumn":56,"fix":"98"},{"ruleId":"94","severity":1,"message":"95","line":344,"column":25,"nodeType":"96","messageId":"97","endLine":344,"endColumn":33,"fix":"99"},{"ruleId":"94","severity":1,"message":"95","line":344,"column":55,"nodeType":"96","messageId":"97","endLine":344,"endColumn":63,"fix":"100"},{"ruleId":"87","severity":1,"message":"88","line":345,"column":34,"nodeType":"89","messageId":"90","endLine":345,"endColumn":36},{"ruleId":"101","severity":1,"message":"102","line":113,"column":30,"nodeType":"103","messageId":"104","endLine":113,"endColumn":31,"suggestions":"105"},{"ruleId":"101","severity":1,"message":"106","line":113,"column":60,"nodeType":"103","messageId":"104","endLine":113,"endColumn":61,"suggestions":"107"},{"ruleId":"91","severity":1,"message":"92","line":61,"column":25,"nodeType":"93","endLine":61,"endColumn":55},{"ruleId":"91","severity":1,"message":"92","line":65,"column":25,"nodeType":"93","endLine":65,"endColumn":55},{"ruleId":"71","replacedBy":"108"},{"ruleId":"73","replacedBy":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Redirect' is defined but never used.","'history' is defined but never used.","'Link' is defined but never used.","'moment' is defined but never used.","'userIcon' is assigned a value but never used.","'firstDay' is assigned a value but never used.","'lastDay' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"112","text":"113"},{"range":"114","text":"113"},{"range":"115","text":"113"},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["116","117"],"Unnecessary escape character: \\\".",["118","119"],["110"],["111"],"no-global-assign","no-unsafe-negation",[8394,8394],"()",[11466,11466],[11496,11496],{"messageId":"120","fix":"121","desc":"122"},{"messageId":"123","fix":"124","desc":"125"},{"messageId":"120","fix":"126","desc":"122"},{"messageId":"123","fix":"127","desc":"125"},"removeEscape",{"range":"128","text":"129"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"130","text":"131"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"132","text":"129"},{"range":"133","text":"131"},[3206,3207],"",[3206,3206],"\\",[3236,3237],[3236,3236]]